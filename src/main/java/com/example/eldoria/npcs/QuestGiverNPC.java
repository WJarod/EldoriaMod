package com.example.eldoria.npcs;

import com.example.eldoria.EldoriaMod;
import com.example.eldoria.entities.ModEntities;
import com.example.eldoria.exploration.ExplorationRewards;
import com.example.eldoria.network.PacketHandler;
import net.minecraft.core.BlockPos;
import net.minecraft.network.chat.Component;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.InteractionHand;
import net.minecraft.world.InteractionResult;
import net.minecraft.world.entity.*;
import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
import net.minecraft.world.entity.ai.attributes.Attributes;
import net.minecraft.world.entity.ai.goal.LookAtPlayerGoal;
import net.minecraft.world.entity.npc.Villager;
import net.minecraft.world.entity.npc.VillagerProfession;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.item.Items;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.entity.ChestBlockEntity;
import net.minecraft.world.phys.Vec3;
import com.example.eldoria.network.QuestGiverPacket;
import net.minecraftforge.network.NetworkDirection;
import java.util.*;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

/**
 * PNJ qui donne des √©nigmes et des indices pour les tr√©sors.
 */
public class QuestGiverNPC extends Villager {

    private static final Map<String, String[]> ENIGMES = new HashMap<>();
    private static final Random RANDOM = new Random();
    private static final Map<String, String> playerQuestions = new HashMap<>();
    private static final Map<String, Integer> playerAttempts = new HashMap<>();
    private BlockPos campfirePos;
    private BlockPos chestPos;

    static {
        // ‚öîÔ∏è √ânigmes avec plusieurs r√©ponses possibles

        ENIGMES.put("Je prot√®ge mais je ne suis pas un mur. Qui suis-je ?",
                new String[]{"Bouclier", "√âp√©e", "Casque", "Plastron", "On me porte pour bloquer les attaques."});

        ENIGMES.put("Je m'ouvre avec une cl√©, mais je ne suis pas une porte. Qui suis-je ?",
                new String[]{"Coffre", "Livre", "Porte", "Sac", "Je peux contenir des tr√©sors ou des pi√®ges."});

        ENIGMES.put("Je suis une arme tranchante mais je ne coupe pas le papier. Qui suis-je ?",
                new String[]{"√âp√©e", "Dague", "Hache", "Fl√®che", "On me forge pour les combats."});

        ENIGMES.put("J‚Äô√©claire la nuit mais je ne suis pas une √©toile. Qui suis-je ?",
                new String[]{"Torche", "Flamme", "Lanterne", "Lampe", "On me porte souvent dans les grottes."});

        ENIGMES.put("Je danse avec le feu et √©claire les t√©n√®bres. Qui suis-je ?",
                new String[]{"Flamme", "Lumi√®re", "Torche", "√âclair", "Je br√ªle mais je peux √™tre souffl√©e."});

        ENIGMES.put("Je bois sans avoir soif et je grandis sans manger. Qui suis-je ?",
                new String[]{"Arbre", "Plante", "Fleur", "Buisson", "Je peux vivre des si√®cles et cacher des secrets."});

        ENIGMES.put("Je tombe sans jamais me faire mal. Qui suis-je ?",
                new String[]{"Pluie", "Neige", "Feuille", "Cendre", "On me voit souvent dans le ciel gris."});

        ENIGMES.put("Je suis visible le jour et disparais la nuit. Qui suis-je ?",
                new String[]{"Ombre", "Fant√¥me", "Mirage", "Reflet", "Je suis attach√©e √† toi mais tu ne peux pas me toucher."});

        ENIGMES.put("On me cherche mais une fois trouv√©, on ne peut plus me voir. Qui suis-je ?",
                new String[]{"Secret", "√âtoile", "Souvenir", "Mirage", "Je peux √™tre cach√© derri√®re un mur ou sous une cascade."});

        ENIGMES.put("On me joue mais je ne suis pas un instrument. On me tourne pour changer la m√©lodie. Qui suis-je ?",
                new String[]{"Carillon", "Fl√ªte", "Cloche", "Harmonica", "On me trouve parfois dans les tours ou les maisons anciennes."});

        ENIGMES.put("J'ai un dos mais pas de corps. Qui suis-je ?",
                new String[]{"Livre", "Sac", "Table", "Bo√Æte", "Je contiens des histoires et des connaissances."});
    }

    public QuestGiverNPC(EntityType<? extends Villager> entityType, Level world) {
        super(entityType, world);
        this.setVillagerData(this.getVillagerData().setProfession(VillagerProfession.NONE));
    }

    public static AttributeSupplier.Builder createAttributes() {
        return Mob.createMobAttributes()
                .add(Attributes.MAX_HEALTH, 20.0)
                .add(Attributes.MOVEMENT_SPEED, 0.0)
                .add(Attributes.FOLLOW_RANGE, 32.0);
    }

    // ‚úÖ Ajout d'un planificateur global pour g√©rer les t√¢ches diff√©r√©es sans bloquer
    private static final java.util.concurrent.ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);

    @Override
    protected void registerGoals() {
        super.registerGoals();
        this.goalSelector.addGoal(1, new LookAtPlayerGoal(this, Player.class, 8.0F));
    }

    /**
     * Interaction avec le PNJ pour poser une √©nigme au joueur.
     */
    @Override
    public InteractionResult interactAt(Player player, Vec3 hitVec, InteractionHand hand) {
        if (!this.level().isClientSide) {
            String question = getRandomEnigme();
            String[] possibleAnswers = ENIGMES.get(question);
            String correctAnswer = possibleAnswers[0];
            String hint = possibleAnswers.length > 4 ? possibleAnswers[4] : "Aucun indice disponible";

            // S√©lectionner 3 r√©ponses parmi les 4 possibles (hors indice)
            List<String> answerChoices = Arrays.asList(possibleAnswers[0], possibleAnswers[1], possibleAnswers[2], possibleAnswers[3]);
            Collections.shuffle(answerChoices);
            int correctAnswerIndex = answerChoices.indexOf(correctAnswer);

            String playerName = player.getName().getString();
            playerQuestions.put(playerName, question);

            EldoriaMod.LOGGER.info("[QUEST GIVER] {} re√ßoit la question '{}'", playerName, question);

            if (player instanceof ServerPlayer serverPlayer) {
                PacketHandler.CHANNEL.sendTo(
                        new QuestGiverPacket(question, answerChoices.toArray(new String[0]), correctAnswerIndex, hint), // ‚úÖ Envoi avec indice
                        serverPlayer.connection.connection,
                        NetworkDirection.PLAY_TO_CLIENT
                );
            }

            return InteractionResult.SUCCESS;
        }
        return InteractionResult.PASS;
    }

    /**
     * G√©n√®re un PNJ al√©atoirement dans le monde.
     */
    public static BlockPos spawnRandomly(ServerLevel world) {
        try {
            List<ServerPlayer> players = world.getPlayers(player -> true);
            if (players.isEmpty()) {
                EldoriaMod.LOGGER.warn("[DEBUG] Aucun joueur connect√©, annulation du spawn.");
                return null;
            }

            ServerPlayer targetPlayer = players.get(world.getRandom().nextInt(players.size()));

            int attempts = 0;
            while (attempts < 10) { // üîÑ Essayer jusqu'√† 10 fois
                attempts++;

                int offsetX = world.getRandom().nextInt(201) - 100;
                int offsetZ = world.getRandom().nextInt(201) - 100;
                int x = targetPlayer.blockPosition().getX() + offsetX;
                int z = targetPlayer.blockPosition().getZ() + offsetZ;
                int y = world.getHeight(net.minecraft.world.level.levelgen.Heightmap.Types.WORLD_SURFACE, x, z);
                BlockPos spawnPos = new BlockPos(x, y, z);

                if (y < world.getMinBuildHeight()) {
                    EldoriaMod.LOGGER.warn("[DEBUG] Tentative {} : Spawn annul√© (trop bas, Y = {}).", attempts, y);
                    continue; // üîÅ Essayer une autre position
                }

                if (!world.getBlockState(spawnPos.below()).isSolid()) {
                    EldoriaMod.LOGGER.warn("[DEBUG] Tentative {} : Bloc non solide √† {}, recalcul...", attempts, spawnPos);
                    continue; // üîÅ Essayer une autre position
                }

                if (world.getBlockState(spawnPos).getFluidState().isSource()) {
                    EldoriaMod.LOGGER.warn("[DEBUG] Tentative {} : Bloc dans l'eau √† {}, recalcul...", attempts, spawnPos);
                    continue; // üîÅ Essayer une autre position
                }

                // ‚úÖ Si toutes les v√©rifications passent, spawn du PNJ
                QuestGiverNPC npc = new QuestGiverNPC(ModEntities.QUEST_GIVER_NPC.get(), world);
                npc.moveTo(x + 0.5, y, z + 0.5, world.getRandom().nextFloat() * 360.0F, 0.0F);
                npc.setCustomName(Component.literal("Aventurier Myst√©rieux"));
                npc.setCustomNameVisible(true);
                world.addFreshEntity(npc);

                // ‚úÖ G√©n√©ration al√©atoire du campement autour du PNJ
                npc.placeCampfireAndChest(world, spawnPos);

                EldoriaMod.LOGGER.info("[DEBUG] PNJ spawn√© avec succ√®s √† X: {}, Y: {}, Z: {} autour de {}", x, y, z, targetPlayer.getName().getString());
                return spawnPos;
            }

            // üö® Si apr√®s 10 tentatives on ne trouve pas d'endroit, on abandonne
            EldoriaMod.LOGGER.error("‚ùå Impossible de spawn le PNJ apr√®s 10 tentatives !");
            return null;

        } catch (Exception e) {
            EldoriaMod.LOGGER.error("[ERREUR] Impossible de spawn le PNJ de qu√™te !", e);
            return null;
        }
    }

    public static boolean hasPendingQuestion(String playerName) {
        return playerQuestions.containsKey(playerName);
    }

    public static void removeQuestion(String playerName) {
        playerQuestions.remove(playerName);
        playerAttempts.remove(playerName);
    }

    /**
     * V√©rifie la r√©ponse du joueur et affiche le r√©sultat dans l'interface sans utiliser le chat.
     * üîπ V2 : Suppression uniquement du PNJ apr√®s 10 secondes, en laissant le camp en place.
     */
    public static void checkAnswer(String playerName, String response, ServerPlayer player) {
        EldoriaMod.LOGGER.info("[CHECK ANSWER] Le joueur {} tente de r√©pondre √† une question.", playerName);

        if (!playerQuestions.containsKey(playerName)) {
            player.displayClientMessage(Component.literal("üìú [Aventurier Myst√©rieux] : Je ne t‚Äôai pas encore pos√© de question !"), true);
            EldoriaMod.LOGGER.error("[CHECK ANSWER] ERREUR: Aucune question trouv√©e pour {}", playerName);
            return;
        }

        String question = playerQuestions.get(playerName);
        String[] answers = ENIGMES.getOrDefault(question, new String[]{"", "", "", "Aucun indice disponible"});
        String expectedAnswer = answers[0]; // ‚úÖ La bonne r√©ponse est TOUJOURS la premi√®re
        String hint = answers.length > 4 ? answers[4] : "Aucun indice disponible"; // ‚úÖ Extraction de l‚Äôindice

        EldoriaMod.LOGGER.info("[DEBUG] R√©ponse re√ßue de {} : '{}'", playerName, response);
        EldoriaMod.LOGGER.info("[DEBUG] R√©ponse attendue : '{}'", expectedAnswer);

        int attempts = playerAttempts.getOrDefault(playerName, 0);

        if (response.equalsIgnoreCase(expectedAnswer)) {
            player.displayClientMessage(Component.literal("üéâ [Aventurier Myst√©rieux] : Bravo, aventurier !"), true);

            EldoriaMod.LOGGER.info("[CHECK ANSWER] Appel de generateTreasure pour {}", player.getName().getString());

            player.getServer().execute(() -> {
                BlockPos treasureCoords = ExplorationRewards.generateTreasure(player);
                if (treasureCoords == null) {
                    EldoriaMod.LOGGER.error("[CHECK ANSWER] √âchec : generateTreasure a retourn√© null !");
                } else {
                    EldoriaMod.LOGGER.info("[CHECK ANSWER] Tr√©sor g√©n√©r√© avec succ√®s √† {}", treasureCoords);
                }
            });

            // ‚úÖ R√©cup√©ration du PNJ et planification de sa suppression apr√®s 10 secondes (camp reste en place)
            ServerLevel world = (ServerLevel) player.level();
            final QuestGiverNPC pnj = (QuestGiverNPC) world.getEntities(null, player.getBoundingBox().inflate(10))
                    .stream()
                    .filter(entity -> entity instanceof QuestGiverNPC)
                    .map(entity -> (QuestGiverNPC) entity)
                    .findFirst()
                    .orElse(null);

            if (pnj != null) {
                EldoriaMod.LOGGER.info("‚è≥ Suppression du PNJ pr√©vue dans 10 secondes...");

                scheduler.schedule(() -> {
                    world.getServer().execute(() -> {
                        if (pnj.isAlive()) {
                            pnj.discard(); // ‚úÖ Suppression du PNJ
                            EldoriaMod.LOGGER.info("‚úÖ PNJ supprim√©.");
                            player.displayClientMessage(Component.literal("üå´Ô∏è L'Aventurier Myst√©rieux s'en va, mais son camp reste √† votre disposition..."), true);
                            EldoriaMod.LOGGER.info("[DEBUG] L'Aventurier Myst√©rieux a disparu.");
                        }
                    });
                }, 10, TimeUnit.SECONDS);
            }

            // ‚úÖ Suppression de la question et des tentatives apr√®s succ√®s
            playerQuestions.remove(playerName);
            playerAttempts.remove(playerName);

        } else {
            attempts++;

            if (attempts == 1) {
                player.displayClientMessage(Component.literal("üí° [Aventurier Myst√©rieux] : Indice ‚Üí " + hint), true);
            } else if (attempts >= 2) {
                player.displayClientMessage(Component.literal("‚è≥ [Aventurier Myst√©rieux] : Tu as √©chou√©... Reviens plus tard !"), true);
                playerQuestions.remove(playerName);
                playerAttempts.remove(playerName);
            } else {
                player.displayClientMessage(Component.literal("‚ùå [Aventurier Myst√©rieux] : Ce n'est pas la bonne r√©ponse ! R√©essaie."), true);
            }

            playerAttempts.put(playerName, attempts);
        }
    }

    /**
     * S√©lectionne une √©nigme al√©atoire.
     */
    private String getRandomEnigme() {
        Object[] keys = ENIGMES.keySet().toArray();
        return (String) keys[RANDOM.nextInt(keys.length)];
    }

    /**
     * Place un feu de camp et un coffre dans un rayon de 4 blocs autour du PNJ.
     */
    private void placeCampfireAndChest(ServerLevel world, BlockPos centerPos) {
        Random random = new Random();
        BlockPos campfirePos = null;
        BlockPos chestPos = null;

        int attempts = 0;
        while (attempts < 10) { // üîÑ Essayer jusqu'√† 10 fois
            attempts++;

            int dx = random.nextInt(6) - 4; // Entre -4 et +4
            int dz = random.nextInt(6) - 4;
            BlockPos candidatePos = centerPos.offset(dx, 0, dz);
            int y = world.getHeight(net.minecraft.world.level.levelgen.Heightmap.Types.WORLD_SURFACE, candidatePos.getX(), candidatePos.getZ());
            BlockPos surfacePos = new BlockPos(candidatePos.getX(), y, candidatePos.getZ());

            if (world.getBlockState(surfacePos.below()).isSolid()) { // ‚úÖ Si le bloc est solide, on valide
                if (campfirePos == null) {
                    campfirePos = surfacePos;
                } else if (chestPos == null) {
                    chestPos = surfacePos;
                    break; // ‚úÖ On arr√™te d√®s qu'on a trouv√© le coffre
                }
            }

            EldoriaMod.LOGGER.warn("‚ö†Ô∏è [WARNING] Tentative de spawn sur un bloc non solide ! Recalcul...");
        }

        // ‚úÖ Placer le feu de camp s'il a une position valide
        if (campfirePos != null) {
            world.setBlock(campfirePos, Blocks.CAMPFIRE.defaultBlockState(), 3);
            this.campfirePos = campfirePos;  // ‚úÖ Sauvegarde dans l'instance
            EldoriaMod.LOGGER.info("üî• Feu de camp plac√© au camp √† {}", campfirePos);
        }

        // ‚úÖ Placer le coffre s'il a une position valide
        if (chestPos != null) {
            world.setBlock(chestPos, Blocks.CHEST.defaultBlockState(), 3);
            this.chestPos = chestPos;
            EldoriaMod.LOGGER.info("üì¶ Coffre plac√© au camp √† {}", chestPos);

            // üîß Solution : copier chestPos dans une variable finale pour √©viter les erreurs avec les lambdas
            final BlockPos finalChestPos = chestPos;

            // ‚úÖ Ajouter un l√©ger d√©lai pour √©viter le bug du coffre vide
            world.getServer().execute(() -> {
                ChestBlockEntity chest = (ChestBlockEntity) world.getBlockEntity(finalChestPos);
                if (chest == null) {
                    EldoriaMod.LOGGER.error("‚ùå Impossible de r√©cup√©rer l'entit√© du coffre √† {}, tentative de correction...", finalChestPos);

                    // ‚úÖ V√©rifier si le bloc est bien un coffre, sinon, on le replace
                    if (!world.getBlockState(finalChestPos).is(Blocks.CHEST)) {
                        world.setBlock(finalChestPos, Blocks.CHEST.defaultBlockState(), 3);
                        EldoriaMod.LOGGER.info("üîÑ Coffre replac√© √† {}", finalChestPos);
                    }

                    // ‚úÖ Nouvelle tentative apr√®s un l√©ger d√©lai
                    world.getServer().execute(() -> {
                        ChestBlockEntity retryChest = (ChestBlockEntity) world.getBlockEntity(finalChestPos);
                        if (retryChest != null) {
                            fillChestWithSupplies(retryChest);
                        } else {
                            EldoriaMod.LOGGER.error("‚ùå √âchec de r√©cup√©ration du coffre apr√®s nouvelle tentative √† {}", finalChestPos);
                        }
                    });
                } else {
                    fillChestWithSupplies(chest);
                }
            });
        } else {
            EldoriaMod.LOGGER.warn("‚ö†Ô∏è Impossible de trouver une position valide pour le coffre !");
        }
    }

    private static void fillChestWithSupplies(ChestBlockEntity chest) {
        List<ItemStack> possibleLoot = new ArrayList<>();

        // ‚úÖ Ajout des aliments (avec un minimum de 10 unit√©s par item)
        possibleLoot.add(new ItemStack(Items.COOKED_BEEF, 10 + new Random().nextInt(6)));
        possibleLoot.add(new ItemStack(Items.BREAD, 10 + new Random().nextInt(6)));
        possibleLoot.add(new ItemStack(Items.GOLDEN_CARROT, 10 + new Random().nextInt(6)));
        possibleLoot.add(new ItemStack(Items.COOKED_CHICKEN, 10 + new Random().nextInt(6)));
        possibleLoot.add(new ItemStack(Items.COOKED_SALMON, 10 + new Random().nextInt(6)));

        // ‚úÖ Ajout d'objets utilitaires (ex : torches, pelle, pioche)
        possibleLoot.add(new ItemStack(Items.TORCH, 10 + new Random().nextInt(6)));
        possibleLoot.add(new ItemStack(Items.IRON_PICKAXE));
        possibleLoot.add(new ItemStack(Items.STONE_AXE));
        possibleLoot.add(new ItemStack(Items.LEATHER_BOOTS));

        // üî• CORRECTION : Convertir la liste en liste modifiable
        List<ItemStack> shuffledLoot = new ArrayList<>(possibleLoot);
        Collections.shuffle(shuffledLoot);

        // ‚úÖ Ajouter les objets m√©lang√©s au coffre (max 6 items)
        for (int i = 0; i < Math.min(shuffledLoot.size(), 6); i++) {
            chest.setItem(i, shuffledLoot.get(i));
        }

        chest.setChanged(); // Assure la sauvegarde du coffre
        EldoriaMod.LOGGER.info("‚úÖ Loot ajout√© dans le coffre du camp !");
    }
}